{"version":3,"sources":["components/Form.js","components/ListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputValue","todo","state","handleInput","e","target","name","value","setState","handleOnSubmit","preventDefault","props","onSubmit","this","type","id","onChange","required","React","Component","ListItem","onEdit","editVal","item","myRef","createRef","onRemove","current","className","setTimeout","handleDelete","handleEditValue","handleCancel","handleSave","handleEdit","title","onClick","ref","List","onDelete","count","map","index","key","App","data","handleSubmit","newVal","handleRemove","filter","i","handleOnEdit","forEach","localStorage","setItem","JSON","stringify","dataStore","parse","getItem","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36ac8fba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Form extends React.Component{\r\n    inputValue = {\r\n        todo: ''\r\n    }\r\n    state = this.inputValue;\r\n\r\n    handleInput = (e) =>{\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    handleOnSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state);\r\n        this.setState(this.inputValue);\r\n    }\r\n\r\n\r\n    render(){\r\n        const {todo} = this.state;\r\n        return(\r\n            <form onSubmit={this.handleOnSubmit}>\r\n                <input type=\"text\"\r\n                name=\"todo\"\r\n                id=\"todo\"\r\n                value={todo}\r\n                onChange={this.handleInput} \r\n                required />\r\n                <button type=\"submit\">Create</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nclass ListItem extends React.Component{\r\n    state = {\r\n        onEdit: false,\r\n        editVal: this.props.item\r\n    };\r\n    myRef = React.createRef();\r\n\r\n    onRemove = () =>{\r\n        this.myRef.current.className = \"active\";\r\n        setTimeout(()=>{\r\n            this.props.handleDelete();\r\n        }, 200)\r\n    };\r\n\r\n    handleEditValue = e =>{\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    onEdit = ()=>{\r\n        this.setState({onEdit: true})\r\n    };\r\n\r\n    handleCancel = ()=>{\r\n        const {editVal} = this.state;\r\n        if(editVal === ''){\r\n            this.setState({editVal: this.props.item});\r\n        }\r\n        this.setState({onEdit: false});\r\n    };\r\n\r\n    handleSave = () =>{\r\n        const {editVal} = this.state;\r\n        if(editVal === ''){\r\n            this.setState({editVal: this.props.item});\r\n        }else{\r\n            this.props.handleEdit(editVal, this.props.id);\r\n        }\r\n        this.setState({onEdit: false})\r\n    }\r\n\r\n    render(){\r\n        const {item} = this.props;\r\n        if(this.state.onEdit){\r\n            return(\r\n                <li> \r\n                    <input type=\"text\"\r\n                    value={this.state.editVal}\r\n                    name=\"editVal\" id=\"editVal\"\r\n                    onChange={this.handleEditValue}\r\n                    />\r\n                    \r\n                    <div className=\"row\">\r\n                        <i className=\"fa fa-save\" \r\n                        title=\"Save\"\r\n                        onClick={this.handleSave}\r\n                        />\r\n                        <i className=\"fa fa-times\"\r\n                        title=\"Cancel\"\r\n                        onClick={this.handleCancel}\r\n                        />\r\n                    </div>\r\n                </li>\r\n            );\r\n        }else{\r\n            return(\r\n                <li ref={this.myRef}> {item} \r\n                    <div className=\"row\">\r\n                        <i className=\"fa fa-pencil\" \r\n                        title=\"Edit\"\r\n                        onClick={this.onEdit}\r\n                        />\r\n                        <i className=\"fa fa-trash\"\r\n                        title=\"Delete\"\r\n                        onClick={this.onRemove} \r\n                        />\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        \r\n    };\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport ListItem from './ListItem';\r\n\r\n\r\nclass List extends React.Component{\r\n    \r\n    render(){\r\n        const {todo, onDelete, onEdit, count} = this.props;\r\n        return(\r\n            <>\r\n                <ul>\r\n                    {\r\n                        todo.map((item, index)=>{\r\n                            return <ListItem \r\n                            item={item.todo} \r\n                            key={index} \r\n                            handleDelete={() => {onDelete(index)}}\r\n                            handleEdit={onEdit}\r\n                            id={index}\r\n                            />\r\n                        })\r\n                    }\r\n                    \r\n                </ul>\r\n                <h2>You have {count} things to do</h2>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport Form from './components/Form';\nimport List from './components/List';\n\nclass App extends React.Component{\n  state = {\n    data:[]\n  };\n\n  handleSubmit = (newVal) =>{\n    this.setState({data: [...this.state.data, newVal]})\n  };\n// localstorage\n  componentDidUpdate(){\n    localStorage.setItem('dataStore', JSON.stringify(this.state.data));\n  }\n\n  componentDidMount(){\n    const dataStore = JSON.parse(localStorage.getItem('dataStore'));\n    if(dataStore !== null){\n      this.setState({data: dataStore});\n    }\n  }\n\n\n  handleRemove = index =>{\n    const {data} = this.state;\n    this.setState({\n      data: data.filter((item, i) => {\n        return i !== index\n      })\n    })\n  };\n\n  handleOnEdit = (editVal, index) =>{\n    const {data} = this.state;\n    data.forEach((item, i) =>{\n      if(i === index){\n        item.todo = editVal;\n      }\n    });\n    this.setState({data: data});\n  }\n\n\n  render(){\n    const {data} = this.state;\n    return(\n      <div className=\"app\">\n        <Form onSubmit={this.handleSubmit} />\n        <h1>To do list</h1>\n        {data.length === 0 \n          ? <h2>Nothings to do</h2> \n          : <List todo={data} \n            onDelete = {this.handleRemove} \n            onEdit={this.handleOnEdit}\n            count={data.length}\n            />\n        }\n        \n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}